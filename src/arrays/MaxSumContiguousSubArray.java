package arrays;

import org.junit.Assert;

import java.util.*;

//https://www.interviewbit.com/problems/max-sum-contiguous-subarray/
public class MaxSumContiguousSubArray {

    public static void main(String[] args) {
        List<Integer> A = Arrays.asList(1, 2, 3, 4, -10);
        Assert.assertEquals("Failed", 10, maxSubArray(A));
        System.out.println("Success");
        A = Arrays.asList(-2, 1, -3, 4, -1, 2, 1, -5, 4);
        Assert.assertEquals("Failed", 6, maxSubArray(A));
        System.out.println("Success");
        A = Arrays.asList(-114, -233, -266, 65, -76, -44, -416, -23, -81, -108, -470, -215, -264, -236, -143, -311, -254, -87, -193, -386, 21, -73, -169, -50, -60, -60, -1, 9, -184, -333, -235, -278, -364, -190, -237, -144, -387, 38, -334, 82, -327, -254, -83, 4, -52, -84, -361, 13, 49, -168, -463, -290, -79, -191, -425, 85, -194, -447, 32, -107, -95, -182, -150, -206, -160, 31, -326, -18, 94, -228, -41, -264, -277, -376, -495, 55, -88, -84, -339, -207, 50, -232, -445, -487, -42, -11, -101, -111, -410, 23, -144, -418, -383, 31, 31, -417, 64, -385, 80, -474, -336, -325, 89, -74, -339, -168, -56, -2, -167, -438, -213, -224, -397, 86, 61, 17, -105, -198, -410, -90, -27, -139, -240, -384, -288, -103, 53, -114, 7, -438, -104, 65, -407, 26, -264, -353, -446, -190, -18, -437, -219, -156, 70, -30, 71, -361, 21, -78, -479, 2, -194, -437, -282, -112, 94, -24, 30, -379, -416, -201, -125, -429, -377, -133, -383, -99, -167, -140, -439, 96, -236, -300, -50, -35, -108, -39, -488, -161, -243, 6, -307, -248, 3, -173, -443, 97, 73, 10, 7, -273, -245, -200, 68, -438, -145, -238, -6, -309, -90, -470, -374, -253, -118, -225, -287, -296, -145, -178, 23, -493, -232, -495, -177, -72, -280, -217, -479, -219, -159, -177, -135, -308, 46, -59, 44, -253, -163, -117, -76, 39, -458, -356, -203, -161, -150, -240, -160, 74, -159, -77, -307, -31, -170, 34, -373, 89, -43, -124, -388, -55, -408, -147, -414, -353, -84, -224, -258, -226, -371, -326, 72, -284, -440, -91, -464, -293, -143, -211, -236, -49, 31, -384, -141, 93, -468, -145, -419, -118, -130, -55, -228, -385, -153, -145, -54, -298, -285, -264, -93, -141, -437, -132, -160, -149, -457, -356, -234, -282, -261, 46, 7, -108, -246, -83, -361, -450, -127, -369, 51, -183, -191, -429, -416, 73, -494, -280, -193, -491, -479, -396, -39, -465, -231, -348, -272, 31, -449, -408, -233, -270, 59, -361, -17, -295, 54, 98, 8, -482, -111, -488, -253, -108, -396, -3, -348, -107, -155, -296, -307, -270, -30, -144, -175, -186, -279, -466, -16, 91, -397, -434, -463, 36, -46, -461, -161, -437, -163, -52, -199, 77, -463, -219, -82, -82, -335, -277, -415, -115, 92, -129, -339, 19, -346, -357, 41, 13, -206, -373, -179, -393, -405, -410, -384, -486, 56, -91, -6, -262, -133, -217, 1, -359, -26, -406, -461, -311, -411, -46, -423, -113, -187, 51, -352, -268, 9, -147, -154, 27, -183, -468, -87, -451, -339, -117, -67, -426, -478, -74, -82, -365, -490, -243, -82, -260, -190, -475, -324, -356, -484, 53, 70, 74, -454, -7, -21, -84, 100, -459, -141, -158, -410, -319, -388, 32, -131, -397, 28, -201, -327, -457, 10, -311, -485, 26, -123, -274, -444, 1, -193, -474, -288, -10, -174, 80, 62, 54, 98, -427, -249, -352, -315, -459, -208, -259, -130, -278, -198, -210, -32, -210, -255, -483, -443, -64, -38, -100, -448, -64, -378, -175, -90, -28, -343, -356, 65, -207, -335, 26, -34, -74, -296, -184, -291, 64, -154, 75, -332, 62, 48, -493, 88, -327, -248, -490, -213, -496, -35, -380, -384, -286, -496, -422, -361, -369, -388, -72, -420, -457, -227, -168, -122, -403, -56, -476, -333, -330, -175, -417, -88, -329, -45, 1, -252, -13, -30, -431, -192, -93, -262, -227, -492, -351, -225, -165, -448, 49, 56, -252, -155, -20, -283, -412, -100, -383, -101, -441, -405, -373, -274, -276, -336, -201, -308, 74, -363, -257, -321, -10, -426, -405, -376, -234, -488, 47, -404, -490, -356, -67, 33, -193, -244, 94, -309, -445, -375, -105, -169, 55, -136, -264, -367, -176, 97, -473, -18, -431, -264, -477, 95, -80, -427, -454, -273, -67, -417, -91, -61, -124, -215, -344, -327, -154, -435, -102, -278, -366, -66, -242, -402, -272, -392, 59, -157, -465, -386, -155, -390, 2, -78, -470, -380, -498, -118, 4, -232, -395, -158, -358, 62, -405, -147, -250, -66, -44, -267, -384, -20, -275, -104, -466, -213, -392, -435, -163, -32, -313, -283, -310, -250, 61, -23, -103, -154, -210, -17, 37, -154, -416, -380, 41, -177, 9, -282, -158, -231, -55, -19, -338, -254, 34, -350, -321, -270, -233, 47, -471, 21, -191, 14, -284, 65, -462, -121, -87, -115, -262, -193, -160, -55, -328, 2, -375, -467, -431, -313, 98, 41, -195, -74, -47, -359, -353, -373, -61, -490, 59, -192, -82, -468, -13, -354, 45, 16, -277, -436, -372, 69, -460, -352, -358, -448, 90, 29, -380, 75, 48, -255, -470, -12, -308, -371, -469, 68, -79, 64, 63, -472, -361, -120, -57, -310, -27, -147, -100, -296, -280, -44, 65, -89, -223, -159, -178, -156, -451, 15, -76, -330, -230, -3, -180, -371, -230, -257, 55, -312, -279, -22, -97, -73, -295, -398, -435, -19, -264, -20, -402, -214, -235, -491, 37, -279, -186, -276, -156, -160, -28, 36, -205, 27, 9, -460, -54, -338, -379, -306, -63, -376, -86, -459, -188, -349, -303, -99, -158, -457, -106, -183, -269, -436, -455, -448, 22, 81, -453, -390, -158, -172, -388, -165, 5, -403, -135, -349, -95, 31, -494, -289, -144, 97, -464, 85, -34, -203, -359, -241, 86, -399, -4, -72, -22, -413, -242, 46, -58, -147, -316, -79, -248, -278, -489, -31, 4, -119, -119, -29, -385, -412, -384, -186, -354, -43, -191, -407, -352, -437, -19, -494, -30, 33, -287, -203, 78, -25, -157, -371, -280, 62, -300, 87, -493, -30, -221, -118, -97, -411, -74, -53, -430, -3, 8, -120, 0, -240, -338, -365, -93, -73, -133, -196, -214, -1, -14, -107, -12, -322, -247, 21, -427, -143, -425, -367, -360, -149, -150, -396, -108, 66, -402, -480, -299, -122, -346, -363, -4, -448, 65, -9, -168, -339, -443, -115, -73, -116, -325, -462, -360, -256, -411, -348, -291, -273, 76, -162, -114, -105, -392, -141, -156, -159, -69, -193, 34, -130, 57, -217, -364, -473, -227, 22, 19, -297, 0 );
        Assert.assertEquals("Failed", 294, maxSubArray(A));
        System.out.println("Success");
    }

    public static int maxSubArray(final List<Integer> A) {
        int maxSum = A.get(0);
        int sum=0;
        for (int i = 0; i < A.size(); i++) {
            sum = sum + A.get(i);
            if (sum > maxSum){
                maxSum = sum;
            }
            if (sum<0){
                sum=0;
            }
        }
        return maxSum;
    }

/*
    public static int maxSubArray(final List<Integer> A) {
        int maxSum = Integer.MIN_VALUE;
        Map<String, Integer> sumMap = new HashMap<>();
        for (int i = 1; i < A.size(); i++) {
            for (int j = 0; j < A.size() && j + i <= A.size(); j++) {
                Integer current = A.get(j);
                Integer sum = current + sum(A, j + 1, j + i, sumMap);
                sumMap.put(j + "_" + (j + i), sum);
                maxSum = Math.max(maxSum, sum);
            }
        }
        return maxSum;
    }

    public static int sum(final List<Integer> A, int start, int end, Map<String, Integer> sumMap) {
        if (start > end) {
            return 0;
        }
        String key = start + "_" + end;
        Integer sum;
        if (sumMap.containsKey(key)) {
            sum = sumMap.get(key);
        } else {
            sum = A.subList(start, end).parallelStream().reduce(0, (integer, integer2) -> integer + integer2);
            sumMap.put(key, sum);
        }
        return sum;
    }*/
}
